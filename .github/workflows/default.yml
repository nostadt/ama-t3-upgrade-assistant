name: CI Process
on: [ push ]

jobs:
  xliff_lint:
    name: "Xliff linter"
    runs-on: ubuntu-20.04
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Install xmllint"
        run: sudo apt-get install libxml2-utils

      - name: "Run lint"
        run: xmllint --schema .github/support/data/xliff-core-1.2-strict.xsd --noout ./Resources/Private/Language/*.xlf

  php_cs_fixer:
    runs-on: ubuntu-20.04
    name: PHP CS (--dry-run)
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Switch default PHP Version to 8.0
        run: sudo update-alternatives --set php /usr/bin/php8.0

      - name: Install Composer dependencies
        run: composer install

      - name: PHP CS
        run: vendor/bin/php-cs-fixer fix --dry-run --diff --diff-format=udiff -vvv --using-cache=false

  composer_normalize:
    runs-on: ubuntu-20.04
    name: composer normalize
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Switch default PHP Version to 8.0
        run: sudo update-alternatives --set php /usr/bin/php8.0

      - name: Install Composer dependencies
        run: composer install

      - name: Normalize
        run: composer normalize

  phpunit:
    runs-on: ${{ matrix.operating-system }}
    needs: [ php_cs_fixer, composer_normalize, xliff_lint ]
    strategy:
      matrix:
        operating-system: [ ubuntu-20.04 ]
        php-versions: [ '7.4', '8.0', '8.1' ]
    name: PHPunit (PHP v${{ matrix.php-versions }} on ${{ matrix.operating-system }})
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          ini-values: "post_max_size=256M" #optional

      - name: Which PHP Version
        run: php -v

      - name: Validate composer.json
        run: composer validate

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install

      - name: Run functionnal and unit tests
        run: vendor/bin/phpunit
